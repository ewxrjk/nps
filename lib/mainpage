/** @mainpage NPS Design Documentation
 *
 * @section Architecture
 *
 * @htmlonly
 * <iframe src="../../lib/arch.svg" frameborder=0></iframe>
 * @endhtmlonly
 *
 * @subsection process Task Information
 *
 * tasks.h provides the API for raw task information.  (A task means
 * a thread or a process.)
 * - task_enumerate() is used to collect task information.  If any of
 * the properties of interest are rates then tasks are enumerated
 * twice, with a delay between.
 * - For each task property there is a function to retrieve the
 * property.  Property values are cached between enumeration calls.
 *
 * See @ref priv.h for handling of processes properties that are only
 * available to root (or owner).
 *
 * @subsubsection vanish Vanishing Tasks
 *
 * An important concern when enumerating tasks and collecting data
 * about them is that it is not atomic.  Tasks can vanish at any point
 * in the process.  When this happens, the process and all its threads
 * are marked as "vanished".
 *
 * Vanished tasks are never treated as selected, though since they may
 * vanish after selection runs, this doesn't necessaily stop them
 * appearing in the output.
 *
 * Uncollectable properties of vanished tasks are reported as 0.  Rate
 * propertes of a vanished task are reported as 0, even if the
 * necessary data had actually been collected and cached.
 *
 * @subsection select Task Selection
 *
 * selectors.h provides the API for filtering tasks in various ways.
 * - select_add() and select_match() are used to add filters.
 * select_default() is used to set defaults.
 * - They control the set of tasks that will be returned by
 * task_get_selected(), which is used at the start of constructing
 * output.
 * - Note that task_reselect() must be called if the selection changes
 * without re-running task_enumerate().
 *
 * @subsection format Task Formatting
 *
 * format.h provides the API for formatting task information.
 * Output format is defined using the following functions:
 * - format_syntax() and format_set() are used to define the format.
 * - @ref format_hierarchy is used to request hierarchical output.
 * - format_ordering() is used to control the order in which tasks
 * appear.
 * (The sort operation is triggered by the UI, but it uses
 * compare_task() as the ordering function.)
 *
 * Output is then formatted using the following functions:
 * - format_columns() is used to work out column sizes.
 * - format_heading() is used to generate headings.
 * - format_task() is used to format each task.
 *
 * @subsection sysinfo System Information
 *
 * sysinfo.h provides the API for collecting and reporting system-wide
 * information.  Unlike task information this is not split between
 * multiple headers.
 * - sysinfo_set() is used to define the format.
 * - sysinfo_format() is used to format the current system information.
 * - sysinfo_reset() is used after time has elapsed to discard cached
 * system information.
 *
 * Both the system information logic and the task formatting logic use
 * parse_element() to parse format strings.
 *
 * @section Goals
 *
 * A few goals are worth stating:
 *
 * <b>Standards Compliance</b>. @c nps is intended to comply with <a
 * href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/ps.html">the
 * Single Unix Specification</a>.  Obviously it goes far beyond that,
 * and provides fixes for some of its limitations.
 *
 * As far as I know there is no global standard for @c top, so the
 * only compatibility requirement there is with @c nps.
 *
 * <B>Scriptability</b>.  @c ps output is often read by scripts, for
 * instance using @c awk.  Therefore, any process property ought to be
 * represented as a single string that does not contain whitespace and
 * is never empty, with very few exceptions (e.g. the full command
 * line with arguments).
 *
 * CSV output support is another nod in this direction.
 *
 * @subsection Non-Goals
 *
 * Targets other than Linux aren't forbidden as such, but they are not
 * an interesting priority at the moment.
 *
 * Much the same applies to compatibility with other implementations
 * of @c ps and @c top.  Portability is best achieved by
 * standardization.  If your script depends on the features of a
 * particular @c ps implementation, the best approach is to use that
 * implementation.
 */
